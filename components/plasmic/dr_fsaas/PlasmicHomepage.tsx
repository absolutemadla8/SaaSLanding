// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kZAYo6xui7uqrb6Zr3Avgj
// Component: BJHQZwpHe9cj

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 4rxYr7o-Bl5/component
import Switch from "../../Switch"; // plasmic-import: PxYBOha2xuq/component
import { Video } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: RhitNJW5Zu-/codeComponent

import { useScreenVariants as useScreenVariantsd4FfAxYjg9Yia } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: d4ffAXYjg9Yia/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_dr_fsaas.module.css"; // plasmic-import: kZAYo6xui7uqrb6Zr3Avgj/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: BJHQZwpHe9cj/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: f5-uvsIf5ae/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 98W_InFwsx_/icon
import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: wx5Bu1FedZC/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  getStarted5?: p.Flex<"button">;
  _switch?: p.Flex<typeof Switch>;
  switch2?: p.Flex<typeof Switch>;
  getStarted?: p.Flex<"a"> & Partial<LinkProps>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  getStarted2?: p.Flex<"a"> & Partial<LinkProps>;
  htmlVideo?: p.Flex<typeof Video>;
  getStarted3?: p.Flex<"a"> & Partial<LinkProps>;
  getStarted4?: p.Flex<"a"> & Partial<LinkProps>;
  foreground?: p.Flex<"div">;
  getStarted9?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "_switch.isChecked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "switch2.isChecked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsd4FfAxYjg9Yia()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___1Bm4W)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__qu1Ew)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__deIvs)}
                displayHeight={"49px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"150px" as const}
                src={{
                  src: "/plasmic/dr_fsaas/images/drfsaaspng.png",
                  fullWidth: 2134,
                  fullHeight: 628,
                  aspectRatio: undefined
                }}
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__tXpxQ)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <Button
                    className={classNames("__wab_instance", sty.button__gQvFj)}
                    color={"clear" as const}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___8OZvo)}
                        role={"img"}
                      />
                    }
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg___9VbDl)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l3LjG
                      )}
                    >
                      {"Features"}
                    </div>
                  </Button>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <Button
                    className={classNames("__wab_instance", sty.button__svMkj)}
                    color={"clear" as const}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__yVSo8)}
                        role={"img"}
                      />
                    }
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__z4I8U)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v2Tej
                      )}
                    >
                      {"Pricing"}
                    </div>
                  </Button>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <Button
                    className={classNames("__wab_instance", sty.button___5T4MK)}
                    color={"clear" as const}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___63T)}
                        role={"img"}
                      />
                    }
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__uN9Ie)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6HsQz
                      )}
                    >
                      {"Documentation"}
                    </div>
                  </Button>
                ) : null}
              </p.Stack>
              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__oUiYu)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__n3Rlw
                    )}
                  >
                    {"Sign up"}
                  </button>
                  {true ? (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__pp3H5
                      )}
                      color={"clear" as const}
                      endIcon={
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__lo1Vy)}
                          role={"img"}
                        />
                      }
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__zXlR0)}
                          role={"img"}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__q3539
                        )}
                      >
                        {"Log in"}
                      </div>
                    </Button>
                  ) : null}
                </div>
              ) : null}
            </p.Stack>
            <Button
              className={classNames("__wab_instance", sty.button__kwTv)}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__af45G)}
                  role={"img"}
                />
              }
              link={"https://demo.drfsaas.com" as const}
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__ooDr7)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__o0VcJ
                )}
              >
                {"Try Demo"}
              </div>
            </Button>
          </p.Stack>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div className={classNames(projectcss.all, sty.columns__iqIbj)}>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.column__dk5Hl)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__a91ZA
                    )}
                  >
                    {"Save 100+ hours on Saas Development"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nCbYc
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5__vxuih
                          )}
                        >
                          {
                            "Stop wasting your time on developing boilerplate code. DRFSaaS is handcrafted with the industry best practices and a simple yet powerful architecture to give you a head-start and go into the market ASAP!"
                          }
                        </h5>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__z14UG)}
                  >
                    <button
                      data-plasmic-name={"getStarted5"}
                      data-plasmic-override={overrides.getStarted5}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.getStarted5
                      )}
                      ref={ref => {
                        $refs["getStarted5"] = ref;
                      }}
                    >
                      {"Get Started"}
                    </button>
                    <button
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button__jx31W
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Try our demo"}
                        </span>
                      </React.Fragment>
                    </button>
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.column__imDqW)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___7Xiy7)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"100%" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"391px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/dr_fsaas/images/_63D5334D523677755B190AecCover03P800Png.png",
                      fullWidth: 800,
                      fullHeight: 520,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              ) : null}
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox__oOhb)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__hGy4Q)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___68Ggp
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h1
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1__mLSu
                          )}
                        >
                          {"Save 100+ hours on\nSaaS Development"}
                        </h1>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__alRXg
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5__waLz7
                          )}
                        >
                          {
                            "Stop wasting your time on developing boilerplate code. DRFSaaS is handcrafted with the industry best practices and a simple yet powerful architecture to give you a head-start and go into the market ASAP!"
                          }
                        </h5>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                  <div className={classNames(projectcss.all, sty.freeBox__dBe)}>
                    <Switch
                      data-plasmic-name={"_switch"}
                      data-plasmic-override={overrides._switch}
                      className={classNames("__wab_instance", sty._switch)}
                      isChecked={
                        p.generateStateValueProp($state, [
                          "_switch",
                          "isChecked"
                        ]) ?? false
                      }
                      onChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "_switch",
                          "isChecked"
                        ])(eventArgs[0]);
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__d0TrA
                        )}
                      >
                        {"Django API"}
                      </div>
                    </Switch>
                    <Switch
                      data-plasmic-name={"switch2"}
                      data-plasmic-override={overrides.switch2}
                      className={classNames("__wab_instance", sty.switch2)}
                      isChecked={
                        p.generateStateValueProp($state, [
                          "switch2",
                          "isChecked"
                        ]) ?? false
                      }
                      onChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "switch2",
                          "isChecked"
                        ])(eventArgs[0]);
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__z1PcH
                        )}
                      >
                        {"Next.js Frontend"}
                      </div>
                    </Switch>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__e0380)}
                  >
                    <p.PlasmicLink
                      data-plasmic-name={"getStarted"}
                      data-plasmic-override={overrides.getStarted}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.getStarted
                      )}
                      component={Link}
                      href={
                        "https://1455178348315.gumroad.com/l/kigyr" as const
                      }
                      platform={"nextjs"}
                    >
                      {"Get Started"}
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      data-plasmic-name={"link"}
                      data-plasmic-override={overrides.link}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link
                      )}
                      component={Link}
                      href={"https://demo.drfsaas.com" as const}
                      platform={"nextjs"}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Try our demo"}
                        </span>
                      </React.Fragment>
                    </p.PlasmicLink>
                  </div>
                </div>
              ) : null}
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__cCkBl)}
                displayHeight={"416px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/dr_fsaas/images/_63D5334D523677755B190AecCover03P800Png.png",
                  fullWidth: 800,
                  fullHeight: 520,
                  aspectRatio: undefined
                }}
              />
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.columns__lrBl0)}>
            <div className={classNames(projectcss.all, sty.column__kPvxs)}>
              <div className={classNames(projectcss.all, sty.freeBox__jH7L)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__y8I1V
                  )}
                >
                  {"DRFSAAS SYSTEM"}
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ek98A
                )}
              >
                {"Built using powerful technologies"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__z3R8G
                )}
              >
                {
                  "DRF SaaS is built using Django Rest Framework, PostgreSQL & Next.js, along with Redis and Sentry."
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column__u2GSw)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__ymZi5)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/dr_fsaas/images/screenshot20230321At43024PMpng.png",
                  fullWidth: 595,
                  fullHeight: 319,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.columns__fovjT)}>
            <div className={classNames(projectcss.all, sty.column___6Bsa1)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zplal
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__ho8IT
                      )}
                    >
                      {"Try our awesome demo,\nbefore you buy!"}
                    </h1>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lCk6M
                )}
              >
                {
                  "DRF SaaS is built using Django Rest Framework, PostgreSQL & Next.js, along with Redis and Sentry."
                }
              </div>
              <p.PlasmicLink
                data-plasmic-name={"getStarted2"}
                data-plasmic-override={overrides.getStarted2}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.getStarted2
                )}
                component={Link}
                href={"https://demo.drfsaas.com" as const}
                platform={"nextjs"}
              >
                {"Get Started"}
              </p.PlasmicLink>
            </div>
            <div className={classNames(projectcss.all, sty.column__woaq3)}>
              <Video
                data-plasmic-name={"htmlVideo"}
                data-plasmic-override={overrides.htmlVideo}
                className={classNames("__wab_instance", sty.htmlVideo)}
                controls={true}
                src={
                  "https://ik.imagekit.io/yqzsxknxfs/drfsaas.mp4?updatedAt=1680434952765" as const
                }
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.columns__frfP)}>
            <div className={classNames(projectcss.all, sty.column__seoPo)}>
              <div className={classNames(projectcss.all, sty.freeBox__nsfAq)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__kAmGw)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("524px" as const)
                      : ("auto" as const)
                  }
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/dr_fsaas/images/_63D61De66A124B0811571566Rbac04P500Png.png",
                    fullWidth: 500,
                    fullHeight: 500,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column__owo6W)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sSNk
                )}
              >
                {"Workspaces, Projects & Teams"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___99WU3
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__cyYbE
                      )}
                    >
                      {
                        "Give your users advanced RBAC ( Role Based Access Control ) Management. Users can create multiple workspaces & teams. Users can also invite people as members, visitors or guests via email."
                      }
                    </h5>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
              <p.PlasmicLink
                data-plasmic-name={"getStarted3"}
                data-plasmic-override={overrides.getStarted3}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.getStarted3
                )}
                component={Link}
                href={"https://1455178348315.gumroad.com/l/kigyr" as const}
                platform={"nextjs"}
              >
                {"Get Started"}
              </p.PlasmicLink>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.columns__qeYtl)}>
            <div className={classNames(projectcss.all, sty.column___1TvGn)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__waLpi
                )}
              >
                {"Magic Link, Social Auth & User Onboarding"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fkyQc
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__fMmRs
                      )}
                    >
                      {
                        "Give your users advanced RBAC ( Role Based Access Control ) Management. Users can create multiple workspaces & teams. Users can also invite people as members, visitors or guests via email."
                      }
                    </h5>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
              <p.PlasmicLink
                data-plasmic-name={"getStarted4"}
                data-plasmic-override={overrides.getStarted4}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.getStarted4
                )}
                component={Link}
                href={"https://1455178348315.gumroad.com/l/kigyr" as const}
                platform={"nextjs"}
              >
                {"Get Started"}
              </p.PlasmicLink>
            </div>
            <div className={classNames(projectcss.all, sty.column__hig8Y)}>
              <div className={classNames(projectcss.all, sty.freeBox__hEOkD)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__pcm9W)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/dr_fsaas/images/_63D625F2103Cc085943A1677Onboard05P500Png.png",
                    fullWidth: 500,
                    fullHeight: 500,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.columns__dSfxu)}>
            <div className={classNames(projectcss.all, sty.column__mE1G4)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zvBx9
                )}
              >
                {"WE ARE HERE TO GET YOU STARTED"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1Nj8L
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Features that speed up your work"
                  : "Features that speed up \nyour work"}
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__nEec)}>
            <div className={classNames(projectcss.all, sty.freeBox__cnlwf)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__qKVoy)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"118px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/dr_fsaas/images/_63D6709084Ce7A437B0C2314CyberSecuritypng.png",
                  fullWidth: 512,
                  fullHeight: 512,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__d89EF
                )}
              >
                {"Secure Social Authentication"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wW66J
                )}
              >
                {
                  "Out of the box authentication with Magic links and social auth with Google and Github"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__cyNe)}>
              <div className={classNames(projectcss.all, sty.freeBox__jhwy)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__kSrU2)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"118px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/dr_fsaas/images/_63D670C9F7E09B2A4E3BcaacSuperMariopng.png",
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9S5GQ
                  )}
                >
                  {"User Profiles"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gAXbh
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Individual user profiles with email confirmation, welcome email, billing information, login IP and password reset."
                    : "Individual user profiles with email confirmation, welcome email, billing information, login IP and password reset."}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__u5YUg)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__h05Qh)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"118px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/dr_fsaas/images/_63D672B003886E182Fd2Da69Crowdpng.png",
                  fullWidth: 512,
                  fullHeight: 512,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__c3111
                )}
              >
                {"User Roles"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__m5WBj
                )}
              >
                {
                  "Advanced RBAC management, with admin, member, guest & viewer user roles"
                }
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__zTCi6)}>
            <div className={classNames(projectcss.all, sty.freeBox__ugGfy)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__iNklT)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"118px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/dr_fsaas/images/_63D672F30F2204585B9D30AbSuitcasepng.png",
                  fullWidth: 512,
                  fullHeight: 512,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nhJNo
                )}
              >
                {"Multiple Workspaces"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cBo57
                )}
              >
                {
                  "Users can create multiple workspaces and add multiple objects and members in that workspace."
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__eF4O9)}>
              <div className={classNames(projectcss.all, sty.freeBox__acGpr)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__rRnPm)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"118px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/dr_fsaas/images/_63D6732B6F089E4A06B32039MembershipCardpng.png",
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xyuew
                  )}
                >
                  {"Teams & Members"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3C0
                  )}
                >
                  {
                    "Admin can invite members to their teams seamlessly via email using token validation."
                  }
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__btZnq)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__lWpZd)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"118px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/dr_fsaas/images/_63D673509Eb1Ee273A755A6DWorkflowpng.png",
                  fullWidth: 512,
                  fullHeight: 512,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mTZoH
                )}
              >
                {"User Onboarding"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vkAeC
                )}
              >
                {
                  "Get your users onboarded asap with inbuilt frontend user onboarding"
                }
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__qepFp)}>
            <div className={classNames(projectcss.all, sty.freeBox__h9Ip)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__jEe3R)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"118px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/dr_fsaas/images/_63D673783Dcdc2333A41733CCodeForkpng.png",
                  fullWidth: 200,
                  fullHeight: 200,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zIfUo
                )}
              >
                {"Tests and CI"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wl9Qp
                )}
              >
                {
                  "Local tests written to ensure minimum errors and bugs in production"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__jvuj8)}>
              <div className={classNames(projectcss.all, sty.freeBox__dsmW)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__i5Zmp)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"118px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/dr_fsaas/images/_63D6794Caac0Beb5Fc3F131DNewPostpng.png",
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oiWhD
                  )}
                >
                  {"Email Templates"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pvmgk
                  )}
                >
                  {
                    "Web and mobile responsive email templates for user welcome, forgot password, team member invitation."
                  }
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__c8L2N)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___31LvC)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"118px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/dr_fsaas/images/_63D67929103Cc0F82E3Ecec6Templatepng.png",
                  fullWidth: 512,
                  fullHeight: 512,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rIvVx
                )}
              >
                {"Powerful Frontend Dashboard"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ehehq
                )}
              >
                {
                  "User dashboard built with Next.js and Tailwind CSS loaded with dummy components and data"
                }
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__vVeRe)}>
            <div className={classNames(projectcss.all, sty.freeBox__mhU8H)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__wjJGe)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"118px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/dr_fsaas/images/_63D6709084Ce7A437B0C2314CyberSecuritypng.png",
                  fullWidth: 512,
                  fullHeight: 512,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__knWk1
                )}
              >
                {"Jira-like sample code"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dfq1W
                )}
              >
                {
                  "Sample code with Jira-like functionality. Create projects, issues, assign them to users & mark status etc."
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__aSzHr)}>
              <div className={classNames(projectcss.all, sty.freeBox__ytD54)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__uHsod)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"118px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/dr_fsaas/images/icons8Docker100Png.png",
                    fullWidth: 100,
                    fullHeight: 100,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__inR1
                  )}
                >
                  {"Dockerised Production Backend"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6DFIt
                  )}
                >
                  {
                    "Dockerised backend with Redis, Nginx, and Backend-API images."
                  }
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__tfUp)}>
            <div className={classNames(projectcss.all, sty.freeBox__xKx4L)} />

            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground"}
              data-plasmic-override={overrides.foreground}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__dC59G)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ticsH)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vdfpG
                    )}
                  >
                    {"Pay only for what you need"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nDxM9
                  )}
                >
                  {
                    "We have broken down our code into three packages, so you have flexibility and comfort in paying \nfor what you actually need"
                  }
                </div>
              </p.Stack>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__epm7X)}
              >
                <div className={classNames(projectcss.all, sty.freeBox___3Snz)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___7RjgH)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3314C
                      )}
                    >
                      {"API ONLY"}
                    </div>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__n3YtH)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zUyL
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vT2Cf
                          )}
                        >
                          {"$"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ySq5G
                          )}
                        >
                          {"99"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vM3Mb
                        )}
                      >
                        {"/license"}
                      </div>
                    </p.Stack>
                  </p.Stack>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wAa91)}
                  />

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__dpz0S)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__kDWy)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ijUPx
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lwHg9
                          )}
                        >
                          <Icon14Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__xjwil
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__yRmTy
                            )}
                          >
                            <Icon14Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__wOaSr
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mmcd5
                          )}
                        >
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__eOcA0
                              )}
                            >
                              {"Label"}
                            </div>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ikt8P
                            )}
                          >
                            {
                              "Dockerised django rest framework backend with Nginx, Redis & Django_rq"
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__pnpwO
                      )}
                      color={"white" as const}
                      endIcon={
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__jmf9N)}
                          role={"img"}
                        />
                      }
                      link={
                        "https://1455178348315.gumroad.com/l/kigyr" as const
                      }
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__pwov9)}
                          role={"img"}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__i2PQ
                        )}
                      >
                        {"Buy API Only"}
                      </div>
                    </Button>
                  </p.Stack>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__epfNx)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__juEg)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7HA4
                      )}
                    >
                      {"FULL STACK"}
                    </div>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__oNWtm)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gtTAd
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eY8Sh
                          )}
                        >
                          {"$"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__c4IhS
                          )}
                        >
                          {"149"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tk86J
                        )}
                      >
                        {"/license"}
                      </div>
                    </p.Stack>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__tQaYw)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___3Po1B
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8Budg
                          )}
                        >
                          {"$"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aHwU5
                          )}
                        >
                          {"99"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pm9Ck
                        )}
                      >
                        {"/license"}
                      </div>
                    </p.Stack>
                  </p.Stack>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ztgLh)}
                  />

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hqTj)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__imtNs)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__phPea
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vNOJ
                          )}
                        >
                          <Icon14Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__a1JvG
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___6PsC0
                            )}
                          >
                            <Icon14Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___3JL6
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0EaEk
                          )}
                        >
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tGZg
                              )}
                            >
                              {"Label"}
                            </div>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__n6IvJ
                            )}
                          >
                            {"Clean & modern Next.js frontend."}
                          </div>
                        </p.Stack>
                      </p.Stack>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rw7A
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__taLoZ
                          )}
                        >
                          <Icon14Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__kitth
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___9Yis6
                            )}
                          >
                            <Icon14Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__t5M8Y
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qPQma
                          )}
                        >
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sSdiV
                              )}
                            >
                              {"Label"}
                            </div>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__z3D6K
                            )}
                          >
                            {
                              "Dockerised django rest framework backend with Nginx, Redis & Django_rq"
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__el49Q
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1RKs2
                          )}
                        >
                          <Icon14Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__lQnO
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fkbds
                            )}
                          >
                            <Icon14Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__nx2R9
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gaHq3
                          )}
                        >
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8E4Kz
                              )}
                            >
                              {"Label"}
                            </div>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yOhL3
                            )}
                          >
                            {"Premium customer support"}
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___8CgX8
                      )}
                      color={"green" as const}
                      endIcon={
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__kUsYi)}
                          role={"img"}
                        />
                      }
                      link={
                        "https://1455178348315.gumroad.com/l/kigyr" as const
                      }
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__ljFas)}
                          role={"img"}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rEz6C
                        )}
                      >
                        {"Buy Full Stack"}
                      </div>
                    </Button>
                  </p.Stack>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__eTVfl)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__y1Tt5)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__binik
                      )}
                    >
                      {"Ultimate"}
                    </div>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__rR8W1)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__aaPqU
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__k1UpN
                          )}
                        >
                          {"$"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__i80Xp
                          )}
                        >
                          {"499"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9XzuE
                        )}
                      >
                        {""}
                      </div>
                    </p.Stack>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__cmRrQ)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dykr2
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mY7C0
                          )}
                        >
                          {"$"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uhitk
                          )}
                        >
                          {"249"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xeQqR
                        )}
                      >
                        {""}
                      </div>
                    </p.Stack>
                  </p.Stack>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cr2Fn)}
                  />

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__mjwUj)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__kFOgj)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lEpb6
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___3RiC
                          )}
                        >
                          <Icon14Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__lSTf
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__sb8U8
                            )}
                          >
                            <Icon14Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__iNrei
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hgfH4
                          )}
                        >
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xyHcA
                              )}
                            >
                              {"Label"}
                            </div>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__waF4Z
                            )}
                          >
                            {"Everything included in Full stack plan"}
                          </div>
                        </p.Stack>
                      </p.Stack>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__eVjVe
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__anahB
                          )}
                        >
                          <Icon14Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__h1XnZ
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xtZjd
                            )}
                          >
                            <Icon14Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__qCe8X
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__v6Hs6
                          )}
                        >
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__u7OYw
                              )}
                            >
                              {"Label"}
                            </div>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vKveA
                            )}
                          >
                            {
                              "Complimentary deployment to production server within 3 months "
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                    <Button
                      className={classNames("__wab_instance", sty.button__fQpi)}
                      color={"white" as const}
                      endIcon={
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__hIy5D)}
                          role={"img"}
                        />
                      }
                      link={
                        "https://1455178348315.gumroad.com/l/kigyr" as const
                      }
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__klLqy)}
                          role={"img"}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mXe91
                        )}
                      >
                        {"Buy Ultimate"}
                      </div>
                    </Button>
                  </p.Stack>
                </div>
              </p.Stack>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__lqhH)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__aXzB8
              )}
            >
              {"Need a customised code suitable for your business?"}
            </div>
            <p.PlasmicLink
              data-plasmic-name={"getStarted9"}
              data-plasmic-override={overrides.getStarted9}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.getStarted9
              )}
              component={Link}
              href={"mailto:hello@drfsaas.com" as const}
              platform={"nextjs"}
            >
              {"Let's Talk 🤙🏼"}
            </p.PlasmicLink>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "getStarted5",
    "_switch",
    "switch2",
    "getStarted",
    "link",
    "getStarted2",
    "htmlVideo",
    "getStarted3",
    "getStarted4",
    "foreground",
    "getStarted9"
  ],
  getStarted5: ["getStarted5"],
  _switch: ["_switch"],
  switch2: ["switch2"],
  getStarted: ["getStarted"],
  link: ["link"],
  getStarted2: ["getStarted2"],
  htmlVideo: ["htmlVideo"],
  getStarted3: ["getStarted3"],
  getStarted4: ["getStarted4"],
  foreground: ["foreground"],
  getStarted9: ["getStarted9"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  getStarted5: "button";
  _switch: typeof Switch;
  switch2: typeof Switch;
  getStarted: "a";
  link: "a";
  getStarted2: "a";
  htmlVideo: typeof Video;
  getStarted3: "a";
  getStarted4: "a";
  foreground: "div";
  getStarted9: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    getStarted5: makeNodeComponent("getStarted5"),
    _switch: makeNodeComponent("_switch"),
    switch2: makeNodeComponent("switch2"),
    getStarted: makeNodeComponent("getStarted"),
    link: makeNodeComponent("link"),
    getStarted2: makeNodeComponent("getStarted2"),
    htmlVideo: makeNodeComponent("htmlVideo"),
    getStarted3: makeNodeComponent("getStarted3"),
    getStarted4: makeNodeComponent("getStarted4"),
    foreground: makeNodeComponent("foreground"),
    getStarted9: makeNodeComponent("getStarted9"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
